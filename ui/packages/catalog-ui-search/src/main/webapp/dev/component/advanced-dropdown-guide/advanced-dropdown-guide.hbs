{{!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
 --}}
 <div class="section">
    <div class="is-header">
        Why dynamic?
    </div>
    <div class="is-medium-font">
        It's dynamic because the component that reveals the dropdown is entirely within your control.  You need to extend 
        the base dropdown.view.
    </div>
</div>
<div class="section">
    <div class="examples is-list has-list-highlighting">
        <div class="example">
            <div class="title">
                Simple Dropdown
            </div>
            <div class="instance">
            
            </div>
        </div>
    </div>
    <div class="is-header">
        Examples
    </div>
    <div class="examples is-list has-list-highlighting">
        <div class="example">
            <div class="title">
                Simple Dropdown
            </div>
            <div class="instance">
            
            </div>
        </div>
    </div>
</div>
<div class="section">
    <div class="is-header">
        When to Use Dynamic
    </div>
    <div class="is-medium-font">
        Utilize the dynamic dropdown when you need something to show something in a dropdown and the html that displays the dropdown needs to be dynamic. 
        Usually you don't need this, so see if static dropdowns are enough for what you want. 
    </div>
</div>
<div class="section">
    <div class="is-header">
        How to Use
    </div>
    <div>
        <div class="is-medium-font">
            Import the 'component/dropdown/popout/dropdown.popout.view' into the view where you want the dropdown to be shown.  Make sure you're using a LayoutView and specify a region 
            for the dropdown to occupy.  Call show on the region when appropriate and pass in the return value from the popout component 'createSimpleDropdown' method.  

            The options that you can pass in to the 'createSimpleDropdown' method are:
            <ul>
                <li>
                    leftIcon
                    <ul>
                        <li>
                            Expects a string, such as 'fa fa-bell'.  This should correspond to a font awesome icon or a codice icon.
                        </li>
                    </ul>
                </li>
                <li>
                    rightIcon
                    <ul>
                        <li>
                            Expects a string, such as 'fa fa-bell'.  This should correspond to a font awesome icon or a codice icon.
                        </li>
                    </ul>
                </li>
                <li>
                    label
                    <ul>
                        <li>
                            Expects a string, such as 'My Cool Dropdown'.  This should be descriptive of what your dropdown is.
                        </li>
                    </ul>
                </li>
                <li>
                    componentToShow
                    <ul>
                        <li>
                            Expects a Marionette View.  This view will be passed the basic dropdown model by default, but the modelForComponent option can override that.
                        </li>
                    </ul>
                </li>
                <li>
                    modelForComponent
                    <ul>
                        <li>
                            Expected to be a Backbone model or collection, but really it could be anything.  This is something your componentToShow is expecting to listen to, update, etc.
                            Your componentToShow will recieve this as its model.
                        </li>
                    </ul>
                </li>
                <li>
                    dropdownCompanionBehaviors
                    <ul>
                        <li>
                            Expected to be a list of Marionette behaviors that you want to be put on the dropdown companion (which houses your componentToShow).  At the moment this is only
                            used to pass the object { navigation: {} } so that action menus get a navigation feel to them.  By that I mean it will give you keyboard accessibility in your 
                            menu components for free if used.
                        </li>
                    </ul>
                </li>
                <li>
                    options
                    <ul>
                        <li>
                            The options that you want to pass to your componentToShow.
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</div>